name: Publish Test Results
description: Publish test results and Allure report to GitHub Pages
inputs:
  files:
    description: File patterns of test result files
    required: true
  allure_results:
    description: Path to the Allure results directory
    required: true
  github_token:
    description: GitHub token to use for the commit
    required: true
runs:
  using: composite
  steps:
    - name: Cleanup
      shell: bash
      run: |
        rm -rf .conclusion
    - name: Upload Test Results
      uses: actions/upload-artifact@v4
      with:
        name: test-results
        path: ${{ inputs.files }}
    - name: Publish Test Results
      id: test-results
      if: always()
      uses: EnricoMi/publish-unit-test-result-action@v2
      with:
        files: ${{ inputs.files }}
        check_run: false
        job_summary: false
        comment_title: WDIO Test Results
        action_fail_on_inconclusive: true
    - name: Get Test Conclusion
      shell: bash
      id: test-conclusion
      run: echo "conclusion=$(jq -r '.conclusion' <<< '${{ steps.test-results.outputs.json }}')" >> $GITHUB_OUTPUT
    - name: Check for gh-pages branch
      if: steps.test-conclusion.outputs.conclusion != 'success'
      shell: bash
      run: |
        if ! git ls-remote --exit-code --heads origin gh-pages; then
          git config --global user.name 'GitHub Actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          git config --global init.defaultBranch gh-pages

          mkdir gh-pages
          cd gh-pages
          git init
          git checkout -b gh-pages

          echo "# Allure Report" > README.md
          git add README.md
          git commit -m "Initialize gh-pages branch with README.md" --no-verify

          # Add the actions-update remote using the bootstrap key
          git remote add actions-update https://x-access-token:${{ inputs.github_token }}@github.com/${{ github.repository }}.git

          git push actions-update gh-pages --no-verify

          cd ..
          rm -rf gh-pages  # Clean up temporary folder
        fi
    - name: Load Allure report history
      if: steps.test-conclusion.outputs.conclusion != 'success'
      uses: actions/checkout@v3
      with:
        ref: gh-pages
        path: gh-pages
    - name: Build Allure report
      if: steps.test-conclusion.outputs.conclusion != 'success'
      uses: simple-elf/allure-report-action@master
      with:
        allure_results: ${{ inputs.allure_results }}
        gh_pages: gh-pages
        allure_report: allure-report
        allure_history: allure-history
    - name: Publish Allure report
      if: steps.test-conclusion.outputs.conclusion != 'success'
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ inputs.github_token }}
        publish_branch: gh-pages
        publish_dir: allure-history
    - name: Comment GitHub Pages URL
      if: github.event_name == 'pull_request' && steps.test-conclusion.outputs.conclusion != 'success'
      uses: actions/github-script@v7
      with:
        script: |
          // For PRs, use the run number in the URL
          const allureUrl = `https://${context.repo.owner}.github.io/${context.repo.repo}/${process.env.RUN_NUMBER}/index.html`;
          
          // Create comment body
          const commentBody = `## ðŸ§ª WDIO Test Results
          
          Tests failed! ðŸ“Š View the detailed Allure report here:
          
          ðŸ”— **Allure Report**: ${allureUrl}
          
          This report contains detailed test results, screenshots, and execution history.`;
          
          // Find existing comment from this workflow
          const comments = await github.rest.issues.listComments({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo
          });
          
          const existingComment = comments.data.find(comment => 
            comment.user.login === 'github-actions[bot]' && 
            comment.body.includes('## ðŸ§ª WDIO Test Results')
          );
          
          if (existingComment) {
            // Update existing comment
            await github.rest.issues.updateComment({
              comment_id: existingComment.id,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: commentBody
            });
          } else {
            // Create new comment
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: commentBody
            });
          }
      env:
        RUN_NUMBER: ${{ github.run_number }}
